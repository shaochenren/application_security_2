"""
Django settings for GiftcardSite project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import base64
from django.core.management import utils

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l'
SECRET_KEY = ""
# If the key file exists, we read it from the previous key
# Else we should generate a new key
# Note that the key stored as plain text was only convenient for github action (It should not be public)
# Normally these key files should be encrypted as well, stored in a USB hardware and take away
if os.path.exists("./part2/secret_key.txt"):
    SECRET_KEY = open("./part2/secret_key.txt", "r").read()
else:
    SECRET_KEY = utils.get_random_secret_key()
    open("./part2/secret_key.txt", "w").write(SECRET_KEY)

FERNET_KEYS = []
# If the key file exists, we read it from the previous key
# Else we should generate a new key, in which way we protect our encrypted data
# Use seperated fernet key and secret key will make the encrypted data safer
# Otherwise when a secret key exposed, the encrypted data would also be exposed
if os.path.exists("./part2/fernet_key.txt"):
    FERNET_KEYS.append(open("./part2/fernet_key.txt", "rb").read())
else:
    FERNET_KEYS.append(utils.get_random_secret_key())
    open("./part2/fernet_key.txt", "w").read(FERNET_KEYS[0])

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Custom
    'LegacySite',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GiftcardSite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GiftcardSite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static Images:

IMAGE_ROOT = os.path.join(BASE_DIR, 'images')

# JS Root.

JS_ROOT = os.path.join(BASE_DIR, 'templates', 'js')

# CSS Root

CSS_ROOT = os.path.join(BASE_DIR, 'templates', 'css')

# Font Root
FONT_ROOT = os.path.join(BASE_DIR, 'templates', 'fonts')

# Random Seed for testing
RANDOM_SEED = base64.b64decode("2RUHYAyJWdDdXOicZfnTRw==")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# Auth Backends
AUTHENTICATION_BACKENDS = ['LegacySite.models.OurBackend']

# Django 3.2 compat
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# ShoddyCorp note: hack to get around stupid browser restrictions.
# Fixes issue with Chrome not allowing partner sites to access the site.
SESSION_COOKIE_SAMESITE = 'Lax'
# Don't know if this is necessary but all this stupid security stuff just
# makes my job harder
SESSION_COOKIE_HTTPONLY = False

if DEBUG:	
    import mimetypes	
    mimetypes.add_type("text/javascript", ".js", True)	
    mimetypes.add_type("text/css", ".css", True)
